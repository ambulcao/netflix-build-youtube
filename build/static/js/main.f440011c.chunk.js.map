{"version":3,"sources":["Nav.js","axios.js","Request.js","Banner.js","Row.js","screens/HomeScreen.js","firebase.js","screens/SignupScreen.js","screens/LoginScreen.js","features/userSlice.js","screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Nav","useState","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","useEffect","addEventListener","removeEventListener","className","onClick","push","src","alt","instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","SignupScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","SetSingIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f440011c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport \"./Nav.css\";\nimport { useHistory } from 'react-router-dom';\n\nfunction Nav() {\nconst [show, handleShow] = useState(false);\nconst history = useHistory();\n\nconst transitionNavBar = () => {\n    if (window.scrollY > 100) {\n        handleShow(true);\n    } else {\n        handleShow(false)\n    }\n};\n\nuseEffect(() => {\n    window.addEventListener(\"scroll\", transitionNavBar);\n    return() => window.removeEventListener(\"scroll\", transitionNavBar)\n}, []);\n\n    return (\n        <div className={`nav ${show && \"nav_black\"}`}>\n            <div className=\"nav_contents\">\n                <img\n                    onClick={() => history.push(\"/\")}\n                    className=\"nav_logo\"\n                    src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n                    alt=\"Netflix Logo\"\n                />\n                <img\n                    onClick={() => history.push(\"/profile\")}\n                    className=\"nav_avatar\"\n                    src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n                    alt=\"Avatar Logo\"\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default Nav;\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n})\n\nexport default instance;","//Typically we would store in {process.env.API_KEY}\n\nconst API_KEY = \"49183a8f12913fd27e3b4358c53724cf\";\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`, \n};\n\nexport default requests;","import React, { useState, useEffect } from 'react';\nimport './Banner.css';\nimport axios from \"./axios\";\nimport requests from \"./Request\";\n\nfunction Banner() {\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            setMovie(\n                request.data.results[\n                Math.floor(Math.random() * request.data.results.length - 1)\n                ]\n            );\n            return request;\n        }\n\n        fetchData();\n    }, [])\n\n    console.log(movie);\n\n    function truncate(string, n) {\n        return string?.length > n ? string.substr(0, n - 1) + '...' : string;\n    }\n\n    return (\n        <header\n            className=\"banner\"\n            style={{\n                backgroundSize: \"cover\",\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n                backgroundPosition: \"center center\",\n            }}\n        >\n            <div className=\"banner_contents\">\n                <h1 className=\"banner_title\">\n                    {movie?.title || movie?.name || movie?.original_name}\n                </h1>\n                <div className=\"banner_buttons\">\n                    <button className=\"banner_button\">Play</button>\n                    <button className=\"banner_button\">Minha Lista</button>\n                </div>\n                <h1 className=\"banner_description\">\n                    {truncate(movie?.overview, 150)}\n                </h1>\n            </div>\n            <div className=\"banner--fadeBottom\" />\n        </header>\n    );\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from 'react';\nimport axios from \"./axios\";\nimport \"./Row.css\";\n\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\n    const [movies, setMovies] = useState([]);\n\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            setMovies(request.data.results);\n            return request;\n        }\n\n        fetchData();\n    }, [fetchUrl]);\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row_posters\">\n                {movies.map((movie) => (\n                    ((isLargeRow && movie.poster_path) || \n                    (!isLargeRow && movie.backdrop_path)) && (\n                        <img \n                            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`} \n                            key={movie.id} \n                            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n                            alt={movie.name} \n                        />\n                    ))\n                )}\n            </div>\n        </div>\n    );\n}\n \nexport default Row;","import React from 'react';\nimport \"./HomeScreen.css\";\nimport Nav from '../Nav';\nimport Banner from '../Banner';\nimport requests from '../Request';\nimport Row from '../Row';\n\nfunction HomeScreen() {\n    return (\n        <div className=\"homeScreen\">\n           <Nav />\n\n           <Banner />\n\n           <Row \n            title='NETFLIX ORIGINALS'\n            fetchUrl={requests.fetchNetflixOriginals}\n            isLargeRow \n           />\n           <Row title='Trending Now' fetchUrl={requests.fetchTrending} />\n           <Row title='Top Rated' fetchUrl={requests.fetchTopRated} />\n           <Row title='Action Movies' fetchUrl={requests.fetchActionMovies} /> \n           <Row title='Comedy Movies' fetchUrl={requests.fetchComedyMovies} />\n           <Row title='Horror Movies' fetchUrl={requests.fetchHorrorMovies} />\n           <Row title='Romance Movies' fetchUrl={requests.fetchRomanceMovies} />\n           <Row title='Documentaries' fetchUrl={requests.fetchDocumentaries} />\n        </div>\n    )\n}\n\nexport default HomeScreen;\n","import firebase from 'firebase';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCXDpuXoZAZgeTH-k5eubxSrJ20IfEL1-A\",\n  authDomain: \"netflix-clone-22e29.firebaseapp.com\",\n  projectId: \"netflix-clone-22e29\",\n  storageBucket: \"netflix-clone-22e29.appspot.com\",\n  messagingSenderId: \"767218640542\",\n  appId: \"1:767218640542:web:bbf3bfae9b48a921503d8f\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\n\nexport { auth };\nexport default db;","import React, { useRef } from 'react';\nimport { auth } from '../firebase';\nimport \"./SignupScreen.css\";\n\nfunction SignupScreen() {\n    const emailRef = useRef(null);\n    const passwordRef = useRef(null);\n\n    const register = (e) => {\n        e.preventDefault();\n    \n        auth.createUserWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        ).then((authUser) => {\n            console.log(authUser);\n        }).catch((error) => {\n            alert(error.message);\n        });\n    };\n\n    const signIn = (e) => {\n        e.preventDefault();\n    \n        auth.signInWithEmailAndPassword(\n            emailRef.current.value,\n            passwordRef.current.value\n        ).then((authUser) => {\n            console.log(authUser);\n        }).catch((error) => alert(error.message));\n    };\n          \n    return (\n        <div className=\"signupScreen\">\n            <form>\n                <h1>Sign In</h1>\n                <input ref={emailRef} placeholder=\"Email\" type=\"email\" />\n                <input ref={passwordRef} placeholder=\"Password\" type=\"password\" />\n                <button type=\"submit\" onClick={signIn}>\n                    Sign In\n                </button>\n\n                <h4>\n                    <span className=\"signupScreen_gray\">New to Netflix? </span>\n                    <span className=\"signupScreen_link\" onClick={register}>Sign Up now.</span>\n                </h4>\n            </form>\n        </div>\n    );\n}\n\nexport default SignupScreen;\n","import React, { useState } from 'react';\nimport \"./LoginScreen.css\";\nimport SignupScreen from \"./SignupScreen\";\n\nfunction LoginScreen() {\n    const [signIn, SetSingIn] = useState(false);\n\n    return (\n        <div className=\"loginscreen\">\n            <div className=\"loginScreen_background\">\n                <img\n                    className=\"loginScreen_logo\"\n                    src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\"\n                    alt=\"\"\n                />\n                <button\n                    onClick={() => SetSingIn(true)}\n                    className=\"loginScreen_button\">Sign In\n                </button>\n                <div className=\"loginScreen_gradient\" />\n            </div>\n\n            <div className=\"loginScreen_body\">\n                {signIn ? (\n                    <SignupScreen />\n                ) : (\n                        <>\n                            <h1>Unlimited films, TV programmes and more.</h1>\n                            <h2>Watch anywhere. Cancel at any time.</h2>\n                            <h3>Ready to watch? Enter your email to create or restart your membership.</h3>\n\n                            <div className=\"loginScreen_input\">\n                                <form>\n                                    <input\n                                        type=\"email\" placeholder=\"Email Address\"\n                                    />\n                                    <button\n                                        onClick={() => SetSingIn(true)}\n                                        className=\"loginScreen_getStarted\">\n                                        GET STARTED\n                        </button>\n                                </form>\n                            </div>\n                        </>\n                    )}\n            </div>\n        </div>\n    )\n}\n\nexport default LoginScreen;\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null,\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n        state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n        state.user = null;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import React from 'react';\nimport Nav from '../Nav';\nimport \"./ProfileScreen.css\";\nimport { useSelector } from 'react-redux';\nimport { selectUser } from '../features/userSlice';\nimport { auth } from '../firebase';\n\nfunction ProfileScreen() {\n    const user = useSelector(selectUser);\n\n    return (\n        <div className=\"profileScreen\">\n            <Nav />\n            <div className=\"profileScreen_body\">\n                <h1>Edit Profile</h1>\n                <div className=\"profileScreen_info\">\n                    <img \n                        src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\n                        alt=\"\"\n                    />\n                    <div className=\"profileScreen_details\">\n                        <h2>{user.email}</h2>\n                        <div className=\"profileScreen_plans\">\n                            <h3>Plans</h3>\n                            <button  onClick={() => auth.signOut()} className=\"profileScreen_signOut\">Sign Out</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileScreen;\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport HomeScreen from './screens/HomeScreen';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport LoginScreen from './screens/LoginScreen';\r\nimport { auth } from './firebase';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { logout, login, selectUser } from './features/userSlice';\r\nimport ProfileScreen from './screens/ProfileScreen';\r\n\r\n\r\nfunction App() {\r\n    const user = useSelector(selectUser); \r\n    const dispatch = useDispatch();\r\n    \r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(userAuth => {\r\n            if(userAuth) {\r\n                //Logged in\r\n                dispatch(login({\r\n                    uid: userAuth.uid,\r\n                    email: userAuth.email,\r\n                })\r\n              );\r\n            } else {\r\n                //Logged out\r\n                dispatch(logout());\r\n            }\r\n        });\r\n        return unsubscribe;\r\n    }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n          {!user ? (\r\n            <LoginScreen />\r\n          ): (\r\n            <Switch>\r\n                <Route path=\"/profile\">\r\n                    <ProfileScreen />\r\n                </Route>\r\n                <Route exact path=\"/\">\r\n                    <HomeScreen />\r\n                </Route>\r\n          </Switch>\r\n          )}\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}